from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
import json
import requests
import os
import uuid
from datetime import datetime, timedelta

app = Flask(__name__)

app.secret_key = 'supersecretkey123_very_long_and_random_string_for_production' 

API_KEY = "052440f4a709b515cd2b46ca2c79b4f8"

#–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def safe_load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                return {}
            return json.loads(content)
    except (FileNotFoundError, ValueError, json.JSONDecodeError):
        save_data(filename, {})
        return {}


def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
users = safe_load_data('data/users.json')
threads = safe_load_data('data/threads.json')



def calculate_user_stats(username):
    user_data = users.get(username)
    if not user_data:
        return
    total_xp = 0

    # XP –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ)
    if user_data.get('join_date'):
        total_xp += 50

    # XP –∑–∞ –∑–∞–∫–ª–∞–¥–∫–∏
    bookmarks = user_data.get('bookmarks', {})
    total_xp += len(bookmarks.get('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ', [])) * 10
    total_xp += len(bookmarks.get('–õ—é–±–∏–º—ã–µ', [])) * 15

    # XP –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ–∏–ª—å–º–∞–º
    total_xp += len(user_data.get('comments', [])) * 3

    # XP –∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collections = user_data.get('collections', [])
    total_xp += len(collections) * 15
    for col in collections:
        total_xp += len(col.get('movies', [])) * 2
        # XP –∑–∞ –ª–∞–π–∫–∏ –Ω–∞ —Å–≤–æ–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        likes_on_this_collection = sum(1 for u_data in users.values() if col['id'] in u_data.get('liked_collections', []))
        total_xp += likes_on_this_collection * 1

    # XP –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
    total_xp += len(user_data.get('collection_comments', [])) * 4

    # XP –∑–∞ —Ç—Ä–µ–¥—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ç—Ä–µ–¥–∞—Ö
    for thread_id, thread_info in threads.items():
        if thread_info.get('created_by') == username:
            total_xp += 20
        for comment in thread_info.get('comments', []):
            if comment.get('user') == username:
                total_xp += 5

    # XP –∑–∞ –¥—Ä—É–∑–µ–π
    total_xp += len(user_data.get('friends', [])) * 10

    # XP –∑–∞ –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    movie_ratings = user_data.get('movie_ratings', {})
    for tmdb_id, ratings_data in movie_ratings.items():
        # –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–µ—Ç 1 XP, –º–∞–∫—Å–∏–º—É–º 5 XP –∑–∞ —Ñ–∏–ª—å–º
        total_xp += sum(1 for category, rating_value in ratings_data.items() if rating_value > 0)
    user_data['total_xp'] = total_xp

     # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    level = 1
    xp_thresholds = {1: 0} # XP, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    for i in range(1, 11): # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–æ 10 —É—Ä–æ–≤–Ω—è
        xp_thresholds[i+1] = xp_thresholds[i] + (i * 50 + i**2 * 5) # XP –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    level = 1
    for lvl, threshold_xp in xp_thresholds.items():
        if total_xp >= threshold_xp:
            level = lvl
        else:
            break

    xp_for_current_level_start = xp_thresholds.get(level, 0)
    xp_for_next_level_start = xp_thresholds.get(level + 1, total_xp + 1) # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å, —Ç–æ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞
    user_data['level'] = level
    user_data['xp_to_next_level'] = xp_for_next_level_start - total_xp if total_xp < xp_for_next_level_start else 0
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ XP, –Ω–∞–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ, –∫ XP, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    xp_in_current_level = total_xp - xp_for_current_level_start
    xp_needed_for_current_level = xp_for_next_level_start - xp_for_current_level_start
    user_data['level_progress'] = int((xp_in_current_level / xp_needed_for_current_level) * 100) if xp_needed_for_current_level > 0 else 100

    if user_data['level_progress'] > 100:
        user_data['level_progress'] = 100

    titles = {
            1: "–ù–æ–≤–∏—á–æ–∫",
            2: "–≠–Ω—Ç—É–∑–∏–∞—Å—Ç",
            3: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            4: "–ó–Ω–∞—Ç–æ–∫",
            5: "–ö–∏–Ω–æ–º–∞–Ω",
            6: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
            7: "–û–±—Å—É–∂–¥–∞—é—â–∏–π",
            8: "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ—è—Ç–µ–ª—å",
            9: "–ú–∞—Å—Ç–µ—Ä Moovly",
            10: "–õ–µ–≥–µ–Ω–¥–∞ Moovly"
        }
    user_data['title'] = titles.get(level, f"–£—Ä–æ–≤–µ–Ω—å {level}") # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ 10, –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å

    check_achievements(username)
    users[username] = user_data
    save_data('data/users.json', users)

def prepare_bookmarks(bookmarks_raw):
    mapping = {
        '–°–º–æ—Ç—Ä—é': 'watching',
        '–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å': 'plan',
        '–ë—Ä–æ—à–µ–Ω–æ': 'dropped',
        '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ': 'watched',
        '–õ—é–±–∏–º—ã–µ': 'favorites'
    }
    english = {eng: bookmarks_raw.get(rus, []) for rus, eng in mapping.items()}
    for key in mapping.values():
        if key not in english:
            english[key] = []
    return english


def check_achievements(username):
    user_data = users.get(username)
    if not user_data:
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ
    default_achievements = [
        {
            'name': '–ù–æ–≤–∏—á–æ–∫',
            'description': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ',
            'criteria': '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
            'earned': False,
            'icon': 'fa-user-plus',
            'emoji': 'üë∂',
            'color': 'from-blue-400 to-blue-600',
            'color_start': '#60a5fa',
            'color_end': '#2563eb'
        },
        {
            'name': '–ö–∏–Ω–æ–º–∞–Ω',
            'description': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å 50 —Ñ–∏–ª—å–º–æ–≤',
            'criteria': '–î–æ–±–∞–≤–∏—Ç—å 50 —Ñ–∏–ª—å–º–æ–≤ –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"',
            'earned': False,
            'icon': 'fa-film',
            'emoji': 'üé¨',
            'color': 'from-purple-400 to-purple-600',
            'color_start': '#a78bfa',
            'color_end': '#7c3aed' 
        },
        {
            'name': '–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä',
            'description': '–û—Å—Ç–∞–≤–∏—Ç—å 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
            'criteria': '–û—Å—Ç–∞–≤–∏—Ç—å 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ñ–∏–ª—å–º–∞–º',
            'earned': False,
            'icon': 'fa-comments',
            'emoji': 'üí¨',
            'color': 'from-green-400 to-green-600',
            'color_start': '#4ade80',
            'color_end': '#16a34a'
        },
        {
            'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
            'description': '–°–æ–∑–¥–∞—Ç—å 5 –∫–æ–ª–ª–µ–∫—Ü–∏–π',
            'criteria': '–°–æ–∑–¥–∞—Ç—å 5 –∫–æ–ª–ª–µ–∫—Ü–∏–π —Ñ–∏–ª—å–º–æ–≤',
            'earned': False,
            'icon': 'fa-boxes',
            'emoji': 'üì¶',
            'color': 'from-red-400 to-red-600',
            'color_start': '#f87171',
            'color_end': '#dc2626'
        },
        {
            'name': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
            'description': '–ü–æ–ª—É—á–∏—Ç—å 50 –ª–∞–π–∫–æ–≤ –Ω–∞ —Å–≤–æ–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
            'criteria': '–°—É–º–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 50 –ª–∞–π–∫–æ–≤ –Ω–∞ —Å–≤–æ–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
            'earned': False,
            'icon': 'fa-star',
            'emoji': '‚≠ê',
            'color': 'from-pink-400 to-pink-600',
            'color_start': '#f472b6',
            'color_end': '#db2777'
        },
        {
            'name': '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
            'description': '–î–æ–±–∞–≤–∏—Ç—å 10 –¥—Ä—É–∑–µ–π',
            'criteria': '–ò–º–µ—Ç—å 10 –¥—Ä—É–∑–µ–π',
            'earned': False,
            'icon': 'fa-user-group',
            'emoji': 'ü§ù',
            'color': 'from-indigo-400 to-indigo-600',
            'color_start': '#818cf8',
            'color_end': '#4f46e5'
        },
        {
            'name': '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
            'description': '–û—Å—Ç–∞–≤–∏—Ç—å 50 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ç—Ä–µ–¥–∞—Ö',
            'criteria': '–û—Å—Ç–∞–≤–∏—Ç—å 50 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ç—Ä–µ–¥–∞—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π',
            'earned': False,
            'icon': 'fa-comment-dots',
            'emoji': 'üó£Ô∏è',
            'color': 'from-teal-400 to-teal-600',
            'color_start': '#2dd4bf',
            'color_end': '#0d9488'
        },
        {
            'name': '–û—Ü–µ–Ω—â–∏–∫',
            'description': '–û—Ü–µ–Ω–∏—Ç—å 20 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            'criteria': '–û—Ü–µ–Ω–∏—Ç—å 20 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å—é–∂–µ—Ç, –∞–∫—Ç–µ—Ä—Å–∫–∞—è –∏–≥—Ä–∞ –∏ —Ç.–¥.)',
            'earned': False,
            'icon': 'fa-sliders',
            'emoji': 'üìä',
            'color': 'from-orange-400 to-orange-600',
            'color_start': '#fb923c',
            'color_end': '#ea580c'
        }
    ]

    # –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å
    current_achievements = {a['name']: a for a in user_data.get('achievements', [])}
    updated_achievements = []

    for default_ach in default_achievements:
        if default_ach['name'] in current_achievements:
            existing_ach = current_achievements[default_ach['name']]
            default_ach['earned'] = existing_ach.get('earned', False)
        updated_achievements.append(default_ach)

    user_data['achievements'] = updated_achievements

    watched_count = len(user_data.get('bookmarks', {}).get('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ', []))
    comment_count = len(user_data.get('comments', []))
    collection_count = len(user_data.get('collections', []))
    friends_count = len(user_data.get('friends', []))

    # –ü–æ–¥—Å—á–µ—Ç –ª–∞–π–∫–æ–≤ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    total_collection_likes = 0
    for col in user_data.get('collections', []):
        total_collection_likes += sum(1 for u_data in users.values() if col['id'] in u_data.get('liked_collections', []))

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ç—Ä–µ–¥–∞—Ö
    thread_comments_count = 0
    for thread_id, thread_info in threads.items():
        for comment in thread_info.get('comments', []):
            if comment.get('user') == username:
                thread_comments_count += 1

    # –ü–æ–¥—Å—á–µ—Ç –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    rated_movies_count = len(user_data.get('movie_ratings', {}))
    
    # –ü—Ä–æ–≤–µ—Ä–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    for achievement in user_data['achievements']:
        if achievement['name'] == '–ù–æ–≤–∏—á–æ–∫' and not achievement['earned']:
            pass

        elif achievement['name'] == '–ö–∏–Ω–æ–º–∞–Ω' and not achievement['earned']:
            if watched_count >= 50:
                achievement['earned'] = True
                flash('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ö–∏–Ω–æ–º–∞–Ω"', 'success')
        elif achievement['name'] == '–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä' and not achievement['earned']:
            if comment_count >= 10:
                achievement['earned'] = True
                flash('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"', 'success')
        elif achievement['name'] == '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä' and not achievement['earned']:
            if collection_count >= 5:
                achievement['earned'] = True
                flash('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"', 'success')
        elif achievement['name'] == '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä' and not achievement['earned']:
                if total_collection_likes >= 50:
                    achievement['earned'] = True
                    flash('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"', 'success')
        elif achievement['name'] == '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞' and not achievement['earned']:
            if friends_count >= 10:
                achievement['earned'] = True
                flash('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞"', 'success')
        elif achievement['name'] == '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫' and not achievement['earned']:
            if thread_comments_count >= 50:
                achievement['earned'] = True
                flash('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫"', 'success')
        elif achievement['name'] == '–û—Ü–µ–Ω—â–∏–∫' and not achievement['earned']:
            if rated_movies_count >= 20:
                achievement['earned'] = True
                flash('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–û—Ü–µ–Ω—â–∏–∫"', 'success')

    users[username] = user_data
    save_data('data/users.json', users)


def get_top_active_users_by_xp(limit=10):
    week_ago = datetime.now() - timedelta(days=7)
    top_users = []
    
    for username, user_data in users.items():
        calculate_user_stats(username) 
        
        # –ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = users.get(username) 
        
        total_xp = user_data.get('total_xp', 0)
        level = user_data.get('level', 1)
        title = user_data.get('title', '–ù–æ–≤–∏—á–æ–∫')

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å XP –∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        if total_xp > 0:
            top_users.append({
                'username': username,
                'total_xp': total_xp,
                'avatar': user_data.get('avatar', '/static/default_avatar.jpg'),
                'level': level,
                'title': title
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é XP
    top_users.sort(key=lambda x: x['total_xp'], reverse=True)
    
    return top_users[:limit]




#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TMDB API
def get_movie_data(movie_id):
    try:
        details_url = f"https://api.themoviedb.org/3/movie/{movie_id}"
        credits_url = f"https://api.themoviedb.org/3/movie/{movie_id}/credits"
        
        params = {
            "api_key": API_KEY,
            "language": "ru-RU"
            }
        
        details_resp = requests.get(details_url, params=params)
        credits_resp = requests.get(credits_url, params=params)
        
        actors = []
        genres = []
        title = ""
        poster_path = ""
        overview = ""
        release_date = ""
        vote_average = 0.0
        
        if details_resp.status_code == 200:
            details = details_resp.json()
            genres = [genre["name"] for genre in details.get("genres", [])]
            title = details.get("title", "")
            poster_path = details.get("poster_path", "")
            overview = details.get("overview", "")
            release_date = details.get("release_date", "")
            vote_average = details.get("vote_average", 0.0)
        
        if credits_resp.status_code == 200:
            actors = [actor["name"] for actor in credits_resp.json().get("cast", [])[:5]]
        
        return actors, genres, title, poster_path, overview, release_date, vote_average
    
    except Exception as e:
        print(f"Error in get_movie_data for movie {movie_id}: {str(e)}")
        return [], [], "", "", "", "", 0.0

def get_pop_movies():
    try:
        url = "https://api.themoviedb.org/3/trending/movie/week"
        params = {
            "api_key": API_KEY,
            "language": "ru-RU",
            "page": 1,
        }
        
        response = requests.get(url, params=params)
        response.raise_for_status()
        
        movies_data = response.json().get("results", [])[:12]
        if not movies_data:
            print("–í ")
            return []

        movies = []
        for movie in movies_data:
            movie_id = movie.get("id")
            if not movie_id:
                continue

            actors, genres, title, poster_path, overview, release_date, vote_average = get_movie_data(movie_id)

            movies.append({
                "id": movie_id,
                "title": title,
                "poster_path": poster_path,
                "overview": overview,
                "release_date": release_date,
                "vote_average": vote_average,
                "actors": actors,
                "genres": genres,
                "media_type": movie.get("media_type", "movie")
            })
        
        return movies

    except requests.exceptions.RequestException as e:
        print(f"Error fetching popular movies from TMDB: {str(e)}")
        return []
    except Exception as e:
        print(f"Unexpected error in get_pop_movies: {str(e)}")
        return []

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_comments_for_title(tmdb_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –ø–æ tmdb_id."""
    comments = []
    for username, user_info in users.items():
        user_comments = user_info.get('comments', [])
        for comment in user_comments:
            if comment.get('tmdb_id') == tmdb_id:
                comments.append({
                    "user": username,
                    "text": comment.get("text", ""),
                    "timestamp": comment.get("timestamp", "")
                })
    comments.sort(key=lambda x: datetime.strptime(x['timestamp'], "%Y-%m-%d %H:%M:%S"), reverse=True)
    return comments




# --- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ ---
@app.context_processor
def inject_user():
    current_user_data = None
    if 'username' in session:
        username = session['username']
        current_user_data = users.get(username)

        if current_user_data:
            # –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            calculate_user_stats(username)
            current_user_data.setdefault('username', username)

    return dict(
        user_authenticated=bool(current_user_data),
        current_user=current_user_data,
        user=current_user_data
    )


# --- –§–∏–ª—å—Ç—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤ ---
@app.template_filter('datetimeformat')
def datetimeformat(value, format='%d.%m.%Y'):
    if isinstance(value, str):
        try:
            value = datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            return value
    return value.strftime(format)


# --- –ú–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
@app.route('/')
def index():
    movies = get_pop_movies()
    top_active_users = get_top_active_users_by_xp(limit=10)
    user = session.get('user')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–µ—Å—Å–∏–∏
    user_authenticated = 'username' in session  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º—É
    return render_template('index.html', 
                           movies=movies or [], 
                           top_active_users=top_active_users, 
                           user=user, 
                           user_authenticated=user_authenticated)



@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        if not username or not password:
            flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!", "error")
            return redirect(url_for('register'))
        
        if username in users:   
            flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", "error")
            return redirect(url_for('register'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π
        users[username] = {
            "uername": username,
            "password": password,
            "join_date": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            "last_login": datetime.now().strftime("%d %B %Y %H:%M"),
            "avatar": "/static/default_avatar.jpg",
            "bio": "",
            "location": "",
            "social_links": [],
            "bookmarks": {
                "–°–º–æ—Ç—Ä—é": [],
                "–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å": [],
                "–ë—Ä–æ—à–µ–Ω–æ": [],
                "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ": [],
                "–õ—é–±–∏–º—ã–µ": []
            },
            "collections": [],
            "comments": [],
            "collection_comments": [], # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
            "activity": [],
            "achievements": [], # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ check_achievements
            "liked_collections": [],
            "friends": [],
            "friend_requests": [],
            "friend_requests_sent": []
        }
    
        
        # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ù–æ–≤–∏—á–æ–∫"
        check_achievements(username) # –í—ã–∑—ã–≤–∞–µ–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–πe
        
        save_data('data/users.json', users)
        session['username'] = username
        flash("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", "success")
        return redirect(url_for('index'))
    
    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        user_data = users.get(username)
        
        if user_data and user_data['password'] == password: # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞
            session['username'] = username
            user_data['last_login'] = datetime.now().strftime("%d %B %Y %H:%M")
            save_data('data/users.json', users)
            flash("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!", "success")
            return redirect(url_for('index'))
        else:
            flash("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", "error")
            return redirect(url_for('login'))
    return render_template('login.html')


@app.route('/logout')
def logout():
    session.clear()
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", "info")
    return redirect(url_for('index'))



@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if not session.get('username'):
        flash("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.", "info")
        return redirect(url_for('login'))

    username = session['username']
    user_data = users.get(username, {}) # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    if request.method == 'POST':
        new_username = request.form.get('username')
        new_bio = request.form.get('bio')
        new_location = request.form.get('location')
        avatar_file = request.files.get('avatar')
        if avatar_file and avatar_file.filename != '':
            ext = os.path.splitext(avatar_file.filename)[1]
            if ext.lower() not in ['.jpg', '.jpeg', '.png', '.gif', '.webp']:
                flash('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.', 'error')
                return redirect(url_for('profile'))
    
            filename = f"{username}_avatar{ext}"
            filepath = os.path.join('static', 'avatars', filename)
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            avatar_file.save(filepath)

            user_data['avatar'] = f"/static/avatars/{filename}"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if new_username and new_username != username:
            if new_username in users:
                flash("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.", "error")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –≤ users –∏ —Å–µ—Å—Å–∏–∏
                users[new_username] = users.pop(username)
                session['username'] = new_username
                username = new_username # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                flash("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", "success")
                user_data = users.get(username) # –û–±–Ω–æ–≤–ª—è–µ–º user_data –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        user_data['bio'] = new_bio
        user_data['location'] = new_location
        
        save_data('data/users.json', users)
        flash("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", "success")
        return redirect(url_for('profile'))
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    comment_count = len(user_data.get('comments', []))
    collection_count = len(user_data.get('collections', []))
    
    # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
    watched_movies_count = len([item for item in user_data.get('bookmarks', {}).get('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ', []) if item.get('type') == 'movie'])
    watched_series_count = len([item for item in user_data.get('bookmarks', {}).get('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ', []) if item.get('type') == 'series'])


    bookmarks_eng = prepare_bookmarks(user_data.get('bookmarks', {}))

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_filter = request.args.get('activity_filter', 'all')
    filtered_activity = []
    all_activity = user_data.get('activity', [])
    
    if activity_filter == 'all':
        filtered_activity = all_activity
    elif activity_filter == 'comments':
        filtered_activity = [a for a in all_activity if a.get('type') == 'comment']
    elif activity_filter == 'collections':
        filtered_activity = [a for a in all_activity if a.get('type') == 'collection' or a.get('type') == 'collection_add_movie']
    elif activity_filter == 'bookmark':
        filtered_activity = [a for a in all_activity if a.get('type') == 'bookmark']

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –Ω–æ–≤–æ–π –∫ —Å—Ç–∞—Ä–æ–π)
    filtered_activity.sort(key=lambda x: datetime.strptime(x['time'], '%Y-%m-%d %H:%M:%S'), reverse=True)

    now = datetime.now()

    activity_this_month = [
        a for a in user_data.get('activity', [])
        if a.get('time') and a['time'].startswith(now.strftime('%Y-%m'))
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è
    friend_requests = user_data.get('friend_requests', [])
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
    friends_list = user_data.get('friends', [])

    return render_template(
        "profile.html",
        user={
            'username': username,
            'join_date': user_data.get('join_date', datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
            'avatar': user_data.get('avatar', '/static/default_avatar.jpg'),
            'is_verified': user_data.get('is_verified', False),
            'is_premium': user_data.get('is_premium', False),
            'location': user_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'bio': user_data.get('bio', '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'),
            'badges': user_data.get('achievements', []),
            'badges_total': len([a for a in user_data.get('achievements', []) if a.get('earned')]),
            'activity': filtered_activity,
            'collections': user_data.get('collections', []),
            'comments_count': comment_count,
            'collections_count': collection_count,
            'movies_count': watched_movies_count,
            'shows_count': watched_series_count,
            'level': user_data.get('level', 1),
            'level_progress': user_data.get('level_progress', 0),
            'total_xp': user_data.get('total_xp', 0),
            'xp_to_next_level': user_data.get('xp_to_next_level', 0),
            'title': user_data.get('title', '–ù–æ–≤–∏—á–æ–∫'),
            'friends': friends_list, # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
            'friend_requests': friend_requests, # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            'social_links': user_data.get('social_links', [])   
        },
        bookmarks=bookmarks_eng,
        base_image_url="https://image.tmdb.org/t/p/w500",
        activity_filter=activity_filter,
        now=now,
        activity_this_month=activity_this_month
    )


@app.route('/user/<username>')
def user_profile(username):
    if 'username' in session and session['username'] == username:
        return redirect(url_for('profile'))

    profile_user_data = users.get(username)
    if not profile_user_data:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('index'))

    current_user_session = session.get('username') 
    
    is_friend = False
    friend_request_sent = False
    
    if current_user_session:
        current_user_data = users.get(current_user_session, {})
        is_friend = username in current_user_data.get('friends', [])
        friend_request_sent = username in current_user_data.get('friend_requests_sent', [])
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –∏–ª–∏ —Å–≤–æ–∏
    display_collections = []
    for col in profile_user_data.get('collections', []):
        if not col.get('is_private', False) or current_user_session == username:
            display_collections.append(col)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    earned_achievements = [ach for ach in profile_user_data.get('achievements', []) if ach.get('earned')]

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –≤—Å—é, –µ—Å–ª–∏ —ç—Ç–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    display_activity = []
    if current_user_session == username:
        display_activity = profile_user_data.get('activity', [])
    else:
        # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ activity
        display_activity = profile_user_data.get('activity', []) 

    display_activity.sort(key=lambda x: datetime.strptime(x['time'], '%Y-%m-%d %H:%M:%S'), reverse=True)

    return render_template('user_profile.html',
                         profile_user=profile_user_data,
                         username=username,
                         is_friend=is_friend,
                         friend_request_sent=friend_request_sent,
                         current_user=current_user_session, # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                         display_collections=display_collections,
                         earned_achievements=earned_achievements,
                         display_activity=display_activity)





@app.route('/send_friend_request/<target_username>', methods=['POST'])
def send_friend_request(target_username):
    if 'username' not in session:
        flash("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è.", "warning")
        return redirect(url_for('login'))

    current_username = session['username']
    if current_username == target_username:
        flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è —Å–∞–º–æ–º—É —Å–µ–±–µ.", "error")
        return redirect(url_for('user_profile', username=target_username))

    current_user_data = users.get(current_username)
    target_user_data = users.get(target_username)

    if not target_user_data:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('index'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—Ä—É–∑—å—è –ª–∏ —É–∂–µ
    if target_username in current_user_data.get('friends', []):
        flash(f"–í—ã —É–∂–µ –¥—Ä—É–∑—å—è —Å {target_username}.", "info")
        return redirect(url_for('user_profile', username=target_username))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
    if target_username in current_user_data.get('friend_requests_sent', []):
        flash(f"–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {target_username}.", "info")
        return redirect(url_for('user_profile', username=target_username))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—à–µ–ª –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_username in target_user_data.get('friend_requests', []):
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø—Ä–∏—à–µ–ª, —Ç–æ —ç—Ç–æ –≤–∑–∞–∏–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è
        current_user_data.setdefault('friends', []).append(target_username)
        target_user_data.setdefault('friends', []).append(current_username)
        target_user_data['friend_requests'].remove(current_username) # –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        flash(f"–í—ã –∏ {target_username} —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è!", "success")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        current_user_data.setdefault('friend_requests_sent', []).append(target_username)
        target_user_data.setdefault('friend_requests', []).append(current_username)
        flash(f"–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {target_username}.", "success")
    
    save_data('data/users.json', users)
    return redirect(url_for('user_profile', username=target_username))


@app.route('/accept_friend_request/<requester>', methods=['POST'])
def accept_friend_request(requester):
    if 'username' not in session:
        flash("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "warning")
        return redirect(url_for('login'))

    username = session['username']
    user_data = users.get(username)
    requester_data = users.get(requester)

    if not user_data or requester not in user_data.get('friend_requests',  []):
        flash("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('profile'))
    
    if 'friends' not in user_data:
        user_data['friends'] = []
    if 'friends' not in requester_data:
        requester_data['friends'] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è
    user_data['friends'].append(requester)
    requester_data['friends'].append(username)

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data['friend_requests'].remove(requester)

    if username in requester_data.get('friend_requests_sent', []):
        requester_data['friend_requests_sent'].remove(username)

    save_data('data/users.json', users)
    flash(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç {requester}.", "success")
    return redirect(url_for('profile'))


@app.route('/decline_friend_request/<requester>', methods=['POST'])
def decline_friend_request(requester):
    if 'username' not in session:
        flash("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "warning")
        return redirect(url_for('login'))

    username = session['username']
    user_data = users.get(username)
    requester_data = users.get(requester)

    if not user_data or requester not in user_data['friend_requests']:
        flash("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('profile'))

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    user_data['friend_requests'].remove(requester)
    if username in requester_data.get('friend_requests_sent', []):
        requester_data['friend_requests_sent'].remove(username)

    save_data('data/users.json', users)
    flash(f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç {requester}.", "success")
    return redirect(url_for('profile'))



@app.route('/movie/<int:tmdb_id>')
def movie_detail(tmdb_id):
    url = f"https://api.themoviedb.org/3/movie/{tmdb_id}"
    params = {
        "api_key": API_KEY,
        "language": "ru-RU",
        "append_to_response": "videos,credits"
    }
    response = requests.get(url, params=params)
    
    if response.status_code != 200:
        flash("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ.", "error")
        return redirect(url_for("index"))

    data = response.json()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏—Å—Å–µ—Ä–µ
    director = next((crew_member.get('name') for crew_member in data.get('credits', {}).get('crew', []) if crew_member.get('job') == 'Director'), '')

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç—Ä–µ–π–ª–µ—Ä–∞
    trailer_key = next((video.get('key') for video in data.get('videos', {}).get('results', []) if video.get('type') == 'Trailer' and video.get('site') == 'YouTube'), '')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ
    actors = [actor['name'] for actor in data.get('credits', {}).get('cast', [])]
    genres = [genre['name'] for genre in data.get('genres', [])]
    title = data.get('title', 'N/A')
    poster_path = data.get('poster_path', '')
    overview = data.get('overview', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    release_date = data.get('release_date', '')
    vote_average = data.get('vote_average', None)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    comments = get_comments_for_title(tmdb_id)

    return render_template(
        "moviepage.html",
        tmdb_id=tmdb_id,
        title=title,
        release_year=release_date[:4] if release_date else 'N/A',
        description=overview,
        genres=genres,
        poster_url=f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else '',
        director=director,
        trailer_url=f"https://www.youtube.com/embed/{trailer_key}" if trailer_key else '',
        comments=comments,
        actors=actors,
        vote_average=round(vote_average, 1) if vote_average is not None else 'N/A'
    )


@app.route('/add_comment/<int:tmdb_id>', methods=['POST'])
def add_comment(tmdb_id):
    if not session.get('username'):
        flash("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "warning")
        return redirect(url_for('login'))
    
    username = session['username']
    comment_text = request.form.get('comment_text')
    
    if not comment_text:
        flash("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "error")
        return redirect(url_for('movie_detail', tmdb_id=tmdb_id))
    
    user_data = users.get(username)
    if not user_data:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('login'))

    user_data.setdefault('comments', [])
    
    new_comment = {
        "tmdb_id": tmdb_id,
        "text": comment_text,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    user_data['comments'].append(new_comment)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    actors, genres, title, poster_path, overview, release_date, vote_average = get_movie_data(tmdb_id)
    user_data.setdefault('activity', []).append({
        'type': 'comment',
        'text': f'–æ—Å—Ç–∞–≤–∏–ª(–∞) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–ª—å–º—É "{title}"',
        'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'icon': 'fas fa-comment',
        'movie': title,
        'poster': poster_path,
        'movie_id': tmdb_id,
        'comment': comment_text
    })
    save_data('data/users.json', users)
    check_achievements(username) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    flash("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", "success")
    return redirect(url_for('movie_detail', tmdb_id=tmdb_id))


@app.route('/api/movie/<int:tmdb_id>/rate', methods=['POST'])
def rate_movie(tmdb_id):
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    data = request.get_json()
    ratings = {
        'plot': int(data.get('plot', 0)),
        'acting': int(data.get('acting', 0)),
        'visuals': int(data.get('visuals', 0)),
        'music': int(data.get('music', 0)),
        'direction': int(data.get('direction', 0))
    }
    username = session['username']
    users.setdefault(username, {}).setdefault('movie_ratings', {})[str(tmdb_id)] = ratings
    save_data('data/users.json', users)
    
    return jsonify({'success': True})


@app.route('/api/movie/<int:tmdb_id>/ratings')
def get_movie_ratings(tmdb_id):
    all_ratings = {
        'plot': [],
        'acting': [],
        'visuals': [],
        'music': [],
        'direction': []
    }
    
    for user_data in users.values():
        if 'movie_ratings' in user_data and str(tmdb_id) in user_data['movie_ratings']:
            for category in all_ratings:
                all_ratings[category].append(user_data['movie_ratings'][str(tmdb_id)][category])
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    avg_ratings = {
        category: sum(values)/len(values) if values else 0 
        for category, values in all_ratings.items()
    }
    
    return jsonify({
        'average_ratings': avg_ratings,
        'total_votes': len(all_ratings['plot'])
    })



@app.route('/catalog')
def catalog():
    page = request.args.get('page', 1, type=int)
    genre_filter = request.args.get('genre')

    discover_url = f'https://api.themoviedb.org/3/discover/movie'
    params = {
        'api_key': API_KEY,
        'language': 'ru-RU',
        'sort_by': 'popularity.desc',
        'page': page
    }

    if genre_filter:
        params['with_genres'] = genre_filter

    response = requests.get(discover_url, params=params)
    response.raise_for_status()
    data = response.json()
    movies = data.get('results', [])

    genre_url = f'https://api.themoviedb.org/3/genre/movie/list'
    genre_response = requests.get(genre_url, params={'api_key': API_KEY, 'language': 'ru-RU'})
    genre_response.raise_for_status()
    genres_data = genre_response.json().get('genres', [])

    return render_template('catalog.html', movies=movies, genres=genres_data, selected_genre=genre_filter, page=page)


@app.route('/api/search/movies')
def search_movies():
    query = request.args.get('query', '').strip()
    if not query:
        return jsonify([])

    url = "https://api.themoviedb.org/3/search/movie"
    params = {
        'api_key': API_KEY,
        'language': 'ru-RU',
        'query': query,
        'page': 1,
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        results = response.json().get('results', [])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        movies = [{
            'id': m['id'],
            'title': m.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            'poster_path': m.get('poster_path'),
            'release_date': m.get('release_date', 'N/A')[:4]  # –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
        } for m in results if m.get('poster_path')]  # –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã —Å –ø–æ—Å—Ç–µ—Ä–∞–º–∏
        
        return jsonify(movies)
    
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤'}), 500
    

@app.route('/advanced-search')
def advanced_search():
    genre_url = f'https://api.themoviedb.org/3/genre/movie/list'
    current_year = datetime.now().year
    try:
        genre_response = requests.get(genre_url, params={'api_key': API_KEY, 'language': 'ru-RU'})
        genre_response.raise_for_status()
        genres = genre_response.json().get('genres', [])
    except requests.exceptions.RequestException as e:
        print(f"Error fetching genres for advanced search: {str(e)}")
        genres = [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return render_template('advanced_search.html', genres=genres, current_year=current_year)


@app.route('/api/advanced-search')
def api_advanced_search():
    title_query = request.args.get("query")
    genres = request.args.get("genres") # –≠—Ç–æ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ "id1,id2,id3"
    year_from = request.args.get("year_from")
    year_to = request.args.get("year_to")
    rating_min = request.args.get("rating_min")
    page = request.args.get("page", 1, type=int) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ page - int

    params = {
        "api_key": API_KEY,
        "language": "ru-RU",
        "page": page,
        "sort_by": "popularity.desc" # –ò–ª–∏ –¥—Ä—É–≥–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    if genres:
        params["with_genres"] = genres # TMDB –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    if year_from:
        params["primary_release_date.gte"] = f"{year_from}-01-01"
    if year_to:
        params["primary_release_date.lte"] = f"{year_to}-12-31"
    if rating_min:
        params["vote_average.gte"] = rating_min

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º search/movie, –∏–Ω–∞—á–µ discover/movie
    if title_query:
        url = "https://api.themoviedb.org/3/search/movie"
        params["query"] = title_query
        # –î–ª—è search/movie –Ω–µ –≤—Å–µ discover –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–∏–º—ã, –Ω–æ TMDB –æ–±—ã—á–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ª–∏—à–Ω–∏–µ
    else:
        url = "https://api.themoviedb.org/3/discover/movie"

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫ (4xx, 5xx)
        data = response.json()

        # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ search/movie, TMDB —Å–∞–º —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
        # –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ discover/movie, –∞ –ø–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é,
        # —Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –∏—Ö –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç–µ.
        # –ú–æ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã—à–µ –∫–æ–¥ –≤ app.py –ø—ã—Ç–∞–µ—Ç—Å—è —ç—Ç–æ —É—á–µ—Å—Ç—å, –ø–µ—Ä–µ–∫–ª—é—á–∞—è—Å—å –º–µ–∂–¥—É search –∏ discover.

        return jsonify(data) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç data, –≤–∫–ª—é—á–∞—è total_pages, total_results
    except requests.exceptions.RequestException as e:
        print(f"Error in advanced search API: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤', 'details': str(e)}), 500




@app.route('/collections')
def user_collections():
    if not session.get('username'):
        flash("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π.", "warning")
        return redirect(url_for('login'))
    
    username = session['username']
    user_data = users.get(username)
    if not user_data:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('login'))
    
    user_collections = user_data.get('collections', [])
    
    public_collections = []
    for user_name, other_user_data in users.items():
        if user_name != username: # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for collection in other_user_data.get('collections', []):
                if not collection.get('is_private', False):
                    collection_copy = collection.copy() # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
                    collection_copy['author'] = user_name
                    public_collections.append(collection_copy)
    
    return render_template('collections.html', 
                         user_collections=user_collections,
                         public_collections=public_collections)


@app.route('/api/collections', methods=['POST'])
def create_collection():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    username = session['username']
    user_data = users.get(username)
    if not user_data:
        return jsonify({'error': 'User not found'}), 404
    
    data = request.json
    
    collection_name = data.get('name')
    if not collection_name:
        return jsonify({'error': 'Collection name is required'}), 400

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    new_collection = {
        'id': str(uuid.uuid4()),
        'name': collection_name,
        'description': data.get('description', ''),
        'is_private': data.get('is_private', False),
        'movies': [],
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    user_data.setdefault('collections', []).append(new_collection)

    user_data.setdefault('activity', []).append({
        'type': 'collection',
        'text': f'—Å–æ–∑–¥–∞–ª(–∞) –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é "{new_collection["name"]}"',
        'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'icon': 'fas fa-folder-open',
        'collection_name': new_collection['name'],
        'collection_id': new_collection['id'] # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å—Å—ã–ª–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    })
    save_data('data/users.json', users)
    check_achievements(username) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    
    return jsonify({'success': True, 'collection_id': new_collection['id']})


@app.route('/collection/<collection_id>')
def collection_detail(collection_id):
    collection = None
    author = None
    is_owner = session.get('username') == author
    for username, user_data in users.items():
        for col in user_data.get('collections', []):
            if col['id'] == collection_id:
                collection = col
                author = username
                break
        if collection:
            break

    if not collection:
        flash("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error")
        return redirect(url_for('collections'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
    if collection.get('is_private', False) and session.get('username') != author:
        flash("–î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω.", "error")
        return redirect(url_for('collections'))

    comments = []
    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    for user_name, user_info in users.items():
        for comment in user_info.get('collection_comments', []):
            if comment.get('collection_id') == collection_id:
                comments.append({
                    'author': user_name, # –ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    'text': comment.get('text'),
                    'timestamp': comment.get('timestamp')
                })
    comments.sort(key=lambda x: datetime.strptime(x['timestamp'], "%Y-%m-%d %H:%M:%S"), reverse=True)
    
    is_liked = False
    if 'username' in session:
        current_user_data = users.get(session['username'], {})
        is_liked = collection_id in current_user_data.get('liked_collections', [])

    is_owner = session.get('username') == author
    
    return render_template('collection_detail.html',
                        collection=collection,
                        author=author,
                        comments=comments,
                        is_liked=is_liked,
                        is_owner=is_owner,
                        current_user=session.get('username'),
                        likes_count=sum(
                            1 for u in users.values() if collection_id in u.get('liked_collections', [])
                        ),
                        comments_count=len(comments))
                        
@app.route('/add_to_collection', methods=['POST'])
def add_to_collection():
    if 'username' not in session:
        flash("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "warning")
        return redirect(url_for('login'))

    username = session['username']
    collection_id = request.form.get('collection_id') # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    movie_id = request.form.get('movie_id')

    user_data = users.get(username)
    if not user_data:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('login'))

    collections = user_data.get('collections', [])

    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ ID
    collection = next((c for c in collections if c['id'] == collection_id), None)

    if collection:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        if int(movie_id) not in [m['id'] for m in collection['movies']]:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            actors, genres, title, poster_path, overview, release_date, vote_average = get_movie_data(movie_id)
            
            collection['movies'].append({
                'id': int(movie_id),
                'title': title,
                'poster_path': poster_path,
                'genres': genres
            })
            
            user_data.setdefault('activity', []).append({
                'type': 'collection_add_movie',
                'text': f'–¥–æ–±–∞–≤–∏–ª(–∞) —Ñ–∏–ª—å–º "{title}" –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "{collection.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")}"',
                'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'icon': 'fas fa-plus-square',
                'movie': title,
                'poster': poster_path,
                'movie_id': int(movie_id),
                'collection_name': collection.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è"),
                'collection_id': collection_id
            })
            save_data('data/users.json', users)
            flash(f"–§–∏–ª—å–º '{title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{collection.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è')}'.", "success")
        else:
            flash("–§–∏–ª—å–º —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.", "info")
    else:
        flash("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error")

    return redirect(url_for('movie_detail', tmdb_id=movie_id)) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞


@app.route('/delete_collection/<collection_id>', methods=['POST'])
def delete_collection(collection_id):
    username = session.get('username')
    if not username:
        flash("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "error")
        return redirect(url_for('login'))
    
    user_data = users.get(username)
    if not user_data:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('profile'))
    
    initial_collection_count = len(user_data.get('collections', []))
    user_data['collections'] = [c for c in user_data.get('collections', []) if c.get('id') != collection_id]
    
    if len(user_data['collections']) < initial_collection_count:
        save_data('data/users.json', users)
        flash("–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", "success")
    else:
        flash("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error")
    return redirect(url_for('profile'))



@app.route('/api/collection/like', methods=['POST'])
def like_collection():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.json
    collection_id = data.get('collection_id')
    
    if not collection_id:
        return jsonify({'error': 'Missing collection_id'}), 400

    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –µ–µ –∞–≤—Ç–æ—Ä–∞
    target_collection = None
    collection_author = None
    for username_iter, user_data_iter in users.items():
        for col in user_data_iter.get('collections', []):
            if col['id'] == collection_id:
                target_collection = col
                collection_author = username_iter
                break
        if target_collection:
            break
    
    if not target_collection:
        return jsonify({'error': 'Collection not found'}), 404

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∞–π–∫–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    if collection_author == session['username']:
        return jsonify({'error': '–ù–µ–ª—å–∑—è –ª–∞–π–∫–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é'}), 403

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
    if target_collection.get('is_private', False) and session.get('username') != collection_author:
        return jsonify({'error': 'Access denied to private collection'}), 403

    current_username = session['username']
    current_user_data = users.get(current_username, {})
    
    liked_collections = current_user_data.setdefault('liked_collections', [])
    
    action = ''
    if collection_id in liked_collections:
        liked_collections.remove(collection_id)
        action = 'unliked'
    else:
        liked_collections.append(collection_id)
        action = 'liked'
    
    save_data('data/users.json', users)
    
    return jsonify({'status': 'success', 'action': action})



@app.route('/collection/comment', methods=['POST'])
def add_collection_comment():
    if 'username' not in session:
        flash("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "warning")
        return redirect(url_for('login'))
    
    collection_id = request.form.get('collection_id')
    text = request.form.get('text')
    
    if not collection_id or not text:
        flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.', "error")
        return redirect(url_for('collection_detail', collection_id=collection_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    target_collection = None
    collection_author = None
    for username_iter, user_data_iter in users.items():
        for col in user_data_iter.get('collections', []):
            if col['id'] == collection_id:
                target_collection = col
                collection_author = username_iter
                break
        if target_collection:
            break
    
    if not target_collection:
        flash("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error")
        return redirect(url_for('collections'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
    if target_collection.get('is_private', False) and session.get('username') != collection_author:
        flash("–î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω.", "error")
        return redirect(url_for('collections'))

    username = session['username']
    user_data = users.get(username)
    if not user_data:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('login'))
    
    comment = {
        'collection_id': collection_id,
        'text': text,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

    user_data.setdefault('collection_comments', []).append(comment)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    user_data.setdefault('activity', []).append({
        'type': 'collection_comment',
        'text': f'–æ—Å—Ç–∞–≤–∏–ª(–∞) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "{target_collection.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")}"',
        'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'icon': 'fas fa-comment',
        'collection_id': collection_id,
        'collection_name': target_collection.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è')
    })
    save_data('data/users.json', users)
    
    flash('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.', "success")
    return redirect(url_for('collection_detail', collection_id=collection_id))



@app.route('/api/collections/<collection_id>/movies', methods=['POST', 'DELETE'])
def collection_movies(collection_id):
    if 'username' not in session:
        return jsonify({"error": "Unauthorized"}), 401
    
    username = session['username']
    user_data = users.get(username)
    if not user_data:
        return jsonify({"error": "User not found"}), 404

    collection = next((c for c in user_data.get('collections', []) if c['id'] == collection_id), None)
    
    if not collection:
        return jsonify({"error": "Collection not found"}), 404
    
    if request.method == 'POST':
        movie_data = request.json
        if not movie_data or 'id' not in movie_data or 'title' not in movie_data:
            return jsonify({"success": False, "message": "Invalid movie data"}), 400

        if movie_data['id'] not in [m['id'] for m in collection['movies']]:
            collection['movies'].append({
                'id': movie_data['id'],
                'title': movie_data['title'],
                'poster_path': movie_data.get('poster_path'),
                'order': len(collection['movies']) + 1 # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
            })
            save_data('data/users.json', users)
            return jsonify({"success": True})
        else:
            return jsonify({"success": False, "message": "–§–∏–ª—å–º —É–∂–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"}), 409
    
    elif request.method == 'DELETE':
        movie_id = request.json.get('movie_id')
        if not movie_id:
            return jsonify({"success": False, "message": "Movie ID is required"}), 400

        initial_len = len(collection['movies'])
        collection['movies'] = [m for m in collection['movies'] if m['id'] != movie_id]
        
        if len(collection['movies']) < initial_len:
            save_data('data/users.json', users)
            return jsonify({"success": True})
        else:
            return jsonify({"success": False, "message": "–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"}), 404



@app.route('/api/collections/<collection_id>/order', methods=['PUT'])
def update_collection_order(collection_id):
    if 'username' not in session:
        return jsonify({"error": "Unauthorized"}), 401
    
    username = session['username']
    user_data = users.get(username)
    if not user_data:
        return jsonify({"error": "User not found"}), 404

    collection = next((c for c in user_data.get('collections', []) if c['id'] == collection_id), None)
    
    if not collection:
        return jsonify({"error": "Collection not found"}), 404
    
    new_order_ids = request.json.get('order')
    if not isinstance(new_order_ids, list):
        return jsonify({"success": False, "message": "Invalid order data"}), 400

    ordered_movies = []
    movie_map = {m['id']: m for m in collection['movies']}
    
    for idx, movie_id in enumerate(new_order_ids):
        if movie_id in movie_map:
            movie = movie_map[movie_id]
            movie['order'] = idx
            ordered_movies.append(movie)
            
    collection['movies'] = ordered_movies
    save_data('data/users.json', users)
    
    return jsonify({"success": True})





@app.route('/add_bookmark', methods=['POST'])
def add_bookmark():
    if 'username' not in session:
        flash("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", "warning")
        return redirect(url_for('login'))

    username = session['username']
    movie_id = request.form.get('movie_id')
    category = request.form.get('category')
    movie_title = request.form.get('movie_title')
    movie_poster = request.form.get('movie_poster')
    
    # movie_genres –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫–∞, –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    try:
        movie_genres = json.loads(request.form.get('movie_genres', '[]'))
    except json.JSONDecodeError:
        movie_genres = []

    if not movie_id or not category:
        flash("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏.", "error")
        return redirect(url_for('index')) # –ò–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ

    user_data = users.get(username)
    if not user_data:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('login'))

    bookmarks = user_data.setdefault('bookmarks', {
        '–°–º–æ—Ç—Ä—é': [], '–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å': [], '–ë—Ä–æ—à–µ–Ω–æ': [], '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ': [], '–õ—é–±–∏–º—ã–µ': []
    })

    movie_bookmark_data = {
        'id': int(movie_id),
        'title': movie_title,
        'poster_path': movie_poster,
        'genres': movie_genres,
        'type': 'movie'
    }  

    # –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–∫–ª–∞–¥–æ–∫, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
    for cat in bookmarks:
        bookmarks[cat] = [item for item in bookmarks[cat] if item.get('id') != int(movie_id)]   

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if category in bookmarks:
        bookmarks[category].append(movie_bookmark_data)
    else:
        flash(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–∫–ª–∞–¥–æ–∫: {category}", "error")
        return redirect(url_for('movie_detail', tmdb_id=movie_id))

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    user_data.setdefault('activity', []).append({
        'type': 'bookmark',
        'text': f'–¥–æ–±–∞–≤–∏–ª(–∞) —Ñ–∏–ª—å–º "{movie_title}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category}"',
        'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'icon': 'fas fa-bookmark',
        'movie': movie_title,
        'poster': movie_poster,
        'movie_id': int(movie_id) # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å—Å—ã–ª–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    })
    
    save_data('data/users.json', users)
    check_achievements(username) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏
    flash(f"–§–∏–ª—å–º '{movie_title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–ª–∞–¥–∫–∏ ({category}).", "success")
    return redirect(url_for('movie_detail', tmdb_id=movie_id))


@app.route('/remove_bookmark', methods=['POST'])
def remove_bookmark():
    if 'username' not in session:
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401

    data = request.get_json(force=True)
    movie_id = data.get('movie_id')
    category = data.get('category')
    
    if not movie_id or not category:
        return jsonify({'success': False, 'message': 'Bad request: movie_id or category missing'}), 400

    username = session['username']
    user_data = users.get(username)
    if not user_data:
        return jsonify({'success': False, 'message': 'User not found'}), 404

    bookmarks = user_data.get('bookmarks', {})

    reverse_mapping = {
        'watching': '–°–º–æ—Ç—Ä—é',
        'plan': '–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å', # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        'dropped': '–ë—Ä–æ—à–µ–Ω–æ',
        'watched': '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ',
        'favorites': '–õ—é–±–∏–º—ã–µ'
        }
    rus_cat = reverse_mapping.get(category, category)

    if rus_cat in bookmarks:
        initial_len = len(bookmarks[rus_cat])
        bookmarks[rus_cat] = [m for m in bookmarks[rus_cat] if str(m.get('id')) != str(movie_id)]
        
        if len(bookmarks[rus_cat]) < initial_len:
            save_data('data/users.json', users)
            return jsonify({'success': True})
        else:
            return jsonify({'success': False, 'message': 'Movie not found in specified category'}), 404
    else:
        return jsonify({'success': False, 'message': 'Category not found'}), 404




@app.route('/threads')
def threads_page():
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–¥–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    all_threads = list(threads.values()) # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–¥—ã
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    all_threads.sort(key=lambda x: datetime.strptime(x['created_at'], "%Y-%m-%d %H:%M:%S"), reverse=True)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ç–µ–≥–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    return render_template('threads.html', threads=all_threads)

@app.route('/thread/<thread_id>')
def thread_detail(thread_id):
    thread = threads.get(thread_id)
    if not thread:
        flash("–¢—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('threads_page'))
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞, –µ—Å–ª–∏ —Ç—Ä–µ–¥ —Å–≤—è–∑–∞–Ω —Å TMDB ID
    movie_data = None
    if thread.get('tmdb_id'):
        actors, genres, title, poster_path, overview, release_date, vote_average = get_movie_data(thread['tmdb_id'])
        movie_data = {
            'id': thread['tmdb_id'],
            'title': title,
            'poster_path': poster_path,
            'genres': genres,
            'overview': overview,
            'release_date': release_date,
            'vote_average': vote_average
        }

    return render_template('thread_detail.html', 
                           thread=thread, 
                           movie_data=movie_data)


@app.route('/api/threads', methods=['POST'])
def create_thread():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    username = session['username']
    data = request.json
    
    title = data.get('title')
    tmdb_id = data.get('tmdb_id')
    tags = data.get('tags', [])
    initial_post = data.get('initial_post', '')
    if not title or not tmdb_id:
        return jsonify({'error': 'Title and TMDB ID are required'}), 400
    new_thread_id = str(uuid.uuid4())
    new_thread = {
        'id': new_thread_id,
        'title': title,
        'tmdb_id': int(tmdb_id),
        'tags': tags,
        'created_by': username,
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'initial_post': initial_post,
        'comments': []
    }
    
    threads[new_thread_id] = new_thread
    save_data('data/threads.json', threads)
    user_data = users.get(username)
    if user_data:
        user_data.setdefault('activity', []).append({
            'type': 'thread_created',
            'text': f'—Å–æ–∑–¥–∞–ª(–∞) –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ "{title}"',
            'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'icon': 'fas fa-comments',
            'thread_id': new_thread_id,
            'thread_title': title
        })
        save_data('data/users.json', users)
    
    return jsonify({'success': True, 'thread_id': new_thread_id})


@app.route('/api/thread/<thread_id>/comment', methods=['POST'])
def add_thread_comment(thread_id):
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    username = session['username']
    data = request.json
    comment_text = data.get('text')
    if not comment_text:
        return jsonify({'error': 'Comment text is required'}), 400
    thread = threads.get(thread_id)
    if not thread:
        return jsonify({'error': 'Thread not found'}), 404
    new_comment = {
        'comment_id': str(uuid.uuid4()),
        'user': username,
        'text': comment_text,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    thread.setdefault('comments', []).append(new_comment)
    save_data('data/threads.json', threads)
    user_data = users.get(username)
    if user_data:
        user_data.setdefault('activity', []).append({
            'type': 'thread_comment',
            'text': f'–ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª(–∞) —Ç—Ä–µ–¥ "{thread.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–¥")}"',
            'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'icon': 'fas fa-comment-dots',
            'thread_id': thread_id,
            'thread_title': thread.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–¥'),
            'comment': comment_text
        })
        save_data('data/users.json', users)
    return jsonify({'success': True, 'comment': new_comment})


@app.route('/api/user/<target_username>/follow', methods=['POST'])
def follow_user(target_username):
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    current_username = session['username']
    if current_username == target_username:
        return jsonify({'error': 'Cannot follow yourself'}), 400
    current_user_data = users.get(current_username)
    target_user_data = users.get(target_username)
    if not current_user_data or not target_user_data:
        return jsonify({'error': 'User not found'}), 404
    current_user_data.setdefault('following', [])
    
    action = ''
    if target_username in current_user_data['following']:
        current_user_data['following'].remove(target_username)
        action = 'unfollowed'
    else:
        current_user_data['following'].append(target_username)
        action = 'followed'
    
    save_data('data/users.json', users)
    return jsonify({'success': True, 'action': action})



if __name__ == '__main__':
    os.makedirs('data', exist_ok=True)
    app.run(debug=True)

